# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "testgf-multi-env" branch
  push:
    branches: 'testgf-multi-env'
    tags:
      - 'v*'
  pull_request:
    branches: ["testgf-multi-env"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  run-linters:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 17

      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          eslint: true

  build:
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      RELEASE_VERSION: ${{ steps.releaseVersion.outputs.RELEASE_VERSION }}
    name: docker build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout 
      uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Set Release version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/*}" | sed 's/v//' >> $GITHUB_ENV # TODO: exponer env.RELEASE_VERSION hacia el deploy
    - id: releaseVersion
      run: echo "::set-output name=RELEASE_VERSION::${{ env.RELEASE_VERSION }}"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/multi:${{ env.RELEASE_VERSION }}
    - name: helpful
      run: |
        echo "docker run --name multi -d -p 8300:5000 -e NODE_PORT=5000 -e APP_VERSION=${{ env.RELEASE_VERSION }} shuffle/multi:${{ env.RELEASE_VERSION }}"
    
  deploy-dev:
    environment: development
    runs-on: ubuntu-latest
    needs: ['build']
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "desp-continuo-211131750-08" #Must be unique in Heroku
          heroku_email: "shufflesoftware@gmail.com"
          healthcheck: "https://desp-continuo-211131750-08.herokuapp.com/health" # TODO verificacion funcional
          usedocker: true
          docker_build_args: |
            NODE_ENV
            APP_VERSION
        env:
          HD_NODE_ENV: 'development'
          HD_APP_VERSION: '${{needs.build.outputs.RELEASE_VERSION}}'

# TODO: requerir aprobaci√≥n a PROD
  deploy-prod:
    environment: production
    runs-on: ubuntu-latest
    needs: ['build','deploy-dev']
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "prod-211131750-08" 
          heroku_email: "shufflesoftware@gmail.com"
          healthcheck: "https://prod-211131750-08.herokuapp.com/health" 
          usedocker: true
          docker_build_args: |
            NODE_ENV
            APP_VERSION
        env:
          HD_NODE_ENV: 'production'
          HD_APP_VERSION: '${{needs.build.outputs.RELEASE_VERSION}}'

